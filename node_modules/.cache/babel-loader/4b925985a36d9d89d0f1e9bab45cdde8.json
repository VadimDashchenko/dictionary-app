{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Work/\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430/dictionary/src/components/Charts.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\n// @ts-ignore\n// import { Chart } from 'react-charts';\nimport { Chart } from 'react-google-charts';\n\nconst MyChart = () => {\n  _s();\n\n  const data = React.useMemo(() => [{\n    label: 'Series 1',\n    data: [[0, 1], [1, 2], [2, 4], [3, 2], [4, 7]]\n  }, {\n    label: 'Series 2',\n    data: [[0, 3], [1, 1], [2, 5], [3, 6], [4, 4]]\n  }, {\n    label: 'Series 2',\n    data: [[0, 3], [1, 1], [2, 5], [3, 6], [4, 4]]\n  }], []);\n  const axes = React.useMemo(() => [{\n    primary: true,\n    type: 'ordinal',\n    position: 'bottom'\n  }, {\n    type: 'linear',\n    position: 'left',\n    stacked: false\n  }], []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      maxWidth: 1000\n    },\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      width: 600,\n      height: 400,\n      chartType: \"ColumnChart\",\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }, this),\n      data: [['City', '2010 Population', '2000 Population'], ['New York City, NY', 8175000, 8008000], ['Los Angeles, CA', 3792000, 3694000], ['Chicago, IL', 2695000, 2896000], ['Houston, TX', 2099000, 1953000], ['Philadelphia, PA', 1526000, 1517000]],\n      options: {\n        title: 'Queries to dictionary',\n        chartArea: {\n          width: '50%'\n        },\n        hAxis: {\n          title: 'Total Population',\n          minValue: 0\n        },\n        vAxis: {\n          title: 'City'\n        }\n      },\n      legendToggle: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MyChart, \"puzTL2H0AcW6w6spuXzYNVE0SuU=\");\n\n_c = MyChart;\nexport default MyChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyChart\");","map":{"version":3,"sources":["/Users/Work/Новая папка/dictionary/src/components/Charts.tsx"],"names":["React","Chart","MyChart","data","useMemo","label","axes","primary","type","position","stacked","display","maxWidth","title","chartArea","width","hAxis","minValue","vAxis"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA,SAASC,KAAT,QAAsB,qBAAtB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAMC,IAAI,GAAGH,KAAK,CAACI,OAAN,CACT,MAAM,CACF;AACIC,IAAAA,KAAK,EAAE,UADX;AAEIF,IAAAA,IAAI,EAAE,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,EAAiC,CAAC,CAAD,EAAI,CAAJ,CAAjC;AAFV,GADE,EAKF;AACIE,IAAAA,KAAK,EAAE,UADX;AAEIF,IAAAA,IAAI,EAAE,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,EAAiC,CAAC,CAAD,EAAI,CAAJ,CAAjC;AAFV,GALE,EASF;AACIE,IAAAA,KAAK,EAAE,UADX;AAEIF,IAAAA,IAAI,EAAE,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,EAAiC,CAAC,CAAD,EAAI,CAAJ,CAAjC;AAFV,GATE,CADG,EAeT,EAfS,CAAb;AAkBA,QAAMG,IAAI,GAAGN,KAAK,CAACI,OAAN,CACT,MAAM,CACF;AAAEG,IAAAA,OAAO,EAAE,IAAX;AAAiBC,IAAAA,IAAI,EAAE,SAAvB;AAAkCC,IAAAA,QAAQ,EAAE;AAA5C,GADE,EAEF;AAAED,IAAAA,IAAI,EAAE,QAAR;AAAkBC,IAAAA,QAAQ,EAAE,MAA5B;AAAoCC,IAAAA,OAAO,EAAE;AAA7C,GAFE,CADG,EAKT,EALS,CAAb;AAQA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,QAAQ,EAAE;AAA7B,KAAZ;AAAA,2BACI,QAAC,KAAD;AACI,MAAA,KAAK,EAAE,GADX;AAEI,MAAA,MAAM,EAAE,GAFZ;AAGI,MAAA,SAAS,EAAC,aAHd;AAII,MAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJZ;AAKI,MAAA,IAAI,EAAE,CACF,CAAC,MAAD,EAAS,iBAAT,EAA4B,iBAA5B,CADE,EAEF,CAAC,mBAAD,EAAsB,OAAtB,EAA+B,OAA/B,CAFE,EAGF,CAAC,iBAAD,EAAoB,OAApB,EAA6B,OAA7B,CAHE,EAIF,CAAC,aAAD,EAAgB,OAAhB,EAAyB,OAAzB,CAJE,EAKF,CAAC,aAAD,EAAgB,OAAhB,EAAyB,OAAzB,CALE,EAMF,CAAC,kBAAD,EAAqB,OAArB,EAA8B,OAA9B,CANE,CALV;AAaI,MAAA,OAAO,EAAE;AACLC,QAAAA,KAAK,EAAE,uBADF;AAELC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFN;AAGLC,QAAAA,KAAK,EAAE;AACHH,UAAAA,KAAK,EAAE,kBADJ;AAEHI,UAAAA,QAAQ,EAAE;AAFP,SAHF;AAOLC,QAAAA,KAAK,EAAE;AACHL,UAAAA,KAAK,EAAE;AADJ;AAPF,OAbb;AAwBI,MAAA,YAAY;AAxBhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH,CAzDD;;GAAMX,O;;KAAAA,O;AA2DN,eAAeA,OAAf","sourcesContent":["import React from 'react'\nimport { observer } from 'mobx-react-lite';\n// @ts-ignore\n// import { Chart } from 'react-charts';\nimport { Chart } from 'react-google-charts';\n\nconst MyChart = () => {\n    const data = React.useMemo(\n        () => [\n            {\n                label: 'Series 1',\n                data: [[0, 1], [1, 2], [2, 4], [3, 2], [4, 7]]\n            },\n            {\n                label: 'Series 2',\n                data: [[0, 3], [1, 1], [2, 5], [3, 6], [4, 4]]\n            },\n            {\n                label: 'Series 2',\n                data: [[0, 3], [1, 1], [2, 5], [3, 6], [4, 4]]\n            }\n        ],\n        []\n    )\n\n    const axes = React.useMemo(\n        () => [\n            { primary: true, type: 'ordinal', position: 'bottom' },\n            { type: 'linear', position: 'left', stacked: false }\n        ],\n        []\n    )\n\n    return (\n        <div style={{ display: 'flex', maxWidth: 1000 }}>\n            <Chart\n                width={600}\n                height={400}\n                chartType=\"ColumnChart\"\n                loader={<div>Loading Chart</div>}\n                data={[\n                    ['City', '2010 Population', '2000 Population'],\n                    ['New York City, NY', 8175000, 8008000],\n                    ['Los Angeles, CA', 3792000, 3694000],\n                    ['Chicago, IL', 2695000, 2896000],\n                    ['Houston, TX', 2099000, 1953000],\n                    ['Philadelphia, PA', 1526000, 1517000],\n                ]}\n                options={{\n                    title: 'Queries to dictionary',\n                    chartArea: { width: '50%' },\n                    hAxis: {\n                        title: 'Total Population',\n                        minValue: 0,\n                    },\n                    vAxis: {\n                        title: 'City',\n                    },\n                }}\n                legendToggle\n            />\n        </div>\n    )\n}\n\nexport default MyChart;"]},"metadata":{},"sourceType":"module"}