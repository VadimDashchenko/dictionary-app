{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Work/\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430/dictionary/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport words from 'an-array-of-english-words';\nimport dictionary from \"./store/Dictionary\";\nimport Input from \"./components/Input\";\nimport MyChart from './components/Charts';\nimport styled from '@emotion/styled';\nconst AppDictionary = styled.div`\n  text-align: center;\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n_c = AppDictionary;\nconst InputBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = InputBlock;\nconst App = observer(_c3 = _s(() => {\n  _s();\n\n  const [string, setString] = useState('');\n  useEffect(() => {\n    dictionary.getAll(words);\n  }, []);\n\n  const stringStart = str => {\n    let result = [];\n    words.map(d => {\n      if (d.startsWith(str)) {\n        result.push(d);\n      }\n    });\n    dictionary.startWord(result);\n  };\n\n  const stringEnd = str => {\n    let result = [];\n    words.map(d => {\n      if (d.endsWith(str)) {\n        result.push(d);\n      }\n    });\n    dictionary.endWord(result);\n  };\n\n  const findDouble = str => {\n    let result = [];\n    words.map(d => {\n      let double = str + str;\n      if (d === double) result.push(d);\n    });\n    dictionary.findDoubleLetter(result);\n  };\n\n  const findInAll = str => {\n    let result = [];\n    words.map(d => {\n      const splt = d.split('');\n      splt.map(d => {\n        d === str && result.push(d);\n      });\n    });\n    dictionary.findInAll(result);\n  };\n\n  const handleChange = str => {\n    setString(str);\n    if (!str) dictionary.clearInAll();else {\n      stringStart(str.toLowerCase());\n      stringEnd(str.toLowerCase());\n      findInAll(str.toLowerCase());\n      findDouble(str.toLowerCase());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppDictionary, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Enter any letter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      data: string,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputBlock, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: `${dictionary.startString.length} words start with the letter ${string}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `${dictionary.endString.length} words end with the letter ${string}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `${dictionary.inAll.length} times the letter ${string} appear in the dictionary`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `${dictionary.doubleLetter.length} words have the same letter repeated in conjunction`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyChart, {\n      data: words\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}, \"dffAKE3RTYqj7g9e4vT7ytJyiuA=\"));\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"AppDictionary\");\n$RefreshReg$(_c2, \"InputBlock\");\n$RefreshReg$(_c3, \"App$observer\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/Users/Work/Новая папка/dictionary/src/App.tsx"],"names":["React","useState","useEffect","observer","words","dictionary","Input","MyChart","styled","AppDictionary","div","InputBlock","App","string","setString","getAll","stringStart","str","result","map","d","startsWith","push","startWord","stringEnd","endsWith","endWord","findDouble","double","findDoubleLetter","findInAll","splt","split","handleChange","clearInAll","toLowerCase","startString","length","endString","inAll","doubleLetter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {observer} from 'mobx-react-lite';\nimport words from 'an-array-of-english-words';\nimport dictionary from \"./store/Dictionary\";\nimport Input from \"./components/Input\";\nimport MyChart from './components/Charts';\nimport styled from '@emotion/styled';\n\nconst AppDictionary = styled.div`\n  text-align: center;\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`\n\nconst InputBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst App = observer(() => {\n  const [string, setString] = useState('');\n\n  useEffect(() => {\n      dictionary.getAll(words)\n  }, [])\n\n  const stringStart = (str?: string) => {\n    let result: Array<string> = [];\n    words.map(d => {\n      if(d.startsWith(str!)) {\n          result.push(d);\n      }\n    })\n   dictionary.startWord(result);\n  };\n\n  const stringEnd = (str?: string) => {\n      let result: Array<string> = [];\n      words.map(d => {\n          if(d.endsWith(str!)) {\n              result.push(d);\n          }\n      })\n      dictionary.endWord(result);\n  }\n\n  const findDouble = (str?: string) => {\n      let result: Array<string> = [];\n      words.map(d => {\n          let double = str!+str!;\n          if(d === double) result.push(d)\n      })\n      dictionary.findDoubleLetter(result);\n  }\n\n  const findInAll = (str?: string) => {\n      let result: Array<string> = [];\n      words.map(d => {\n          const splt = d.split('');\n          splt.map(d => {\n              d === str && result.push(d)\n          })\n      })\n      dictionary.findInAll(result);\n  }\n\n  const handleChange = (str: string | undefined) => {\n      setString(str!);\n      if(!str) dictionary.clearInAll();\n      else {\n          stringStart(str.toLowerCase());\n          stringEnd(str.toLowerCase());\n          findInAll(str.toLowerCase());\n          findDouble(str.toLowerCase());\n      }\n  }\n\n  return (\n    <AppDictionary>\n        <h2>Enter any letter</h2>\n      <Input data={string} handleChange={handleChange} />\n      <InputBlock>\n        <p>{`${dictionary.startString.length} words start with the letter ${string}`}</p>\n        <p>{`${dictionary.endString.length} words end with the letter ${string}`}</p>\n        <p>{`${dictionary.inAll.length} times the letter ${string} appear in the dictionary`}</p>\n        <p>{`${dictionary.doubleLetter.length} words have the same letter repeated in conjunction`}</p>\n      </InputBlock>\n        <MyChart data={words} />\n    </AppDictionary>\n  );\n});\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}